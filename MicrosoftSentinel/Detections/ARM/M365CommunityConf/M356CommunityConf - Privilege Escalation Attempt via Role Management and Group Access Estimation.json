{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/42cc8c6f-c222-41b0-bab8-2f8b8aa06834')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/42cc8c6f-c222-41b0-bab8-2f8b8aa06834')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "M356CommunityConf - Privilege Escalation Attempt via Role Management and Group Access Estimation",
                "description": "This detection identifies potential privilege escalation attempts where users leverage PowerShell to enumerate groups and assess their ability to modify them through Microsoft Graph API. The rule specifically targets reconnaissance activities where users query the role management \"estimateAccess\" API or enumerate all groups to identify potential authorization gaps they could exploit. The detection incorporates blast radius assessment by prioritizing activities performed by users with existing privileges, who may be looking to further expand their access.\n\nThe rule captures scenarios where an attacker or insider threat first enumerates all available groups in the tenant and then systematically tests their ability to modify these groups using the estimateAccess API endpoint. This pattern indicates deliberate permission probing rather than legitimate administrative actions. Each alert includes contextual information about the user's existing privileges, organizational position, and access patterns to help security teams quickly assess the risk level and determine appropriate response actions.",
                "severity": "High",
                "enabled": true,
                "query": "// Get most recent identity info to join later, including blast radius indicators\nlet RecentIdentityInfo = IdentityInfo\n    | where TimeGenerated > ago(10d)\n    | extend \n        // Parse assigned roles from JSON format\n        ParsedRoles = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", parse_json(AssignedRoles), dynamic([])),\n        // Parse group memberships from JSON format\n        ParsedGroups = iff(isnotempty(GroupMembership) and GroupMembership != \"[]\", parse_json(GroupMembership), dynamic([])),\n        // Check for privileged roles\n        IsAdmin = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", true, false),\n        IsPrivilegedRole = iff(\n            AssignedRoles has_any(\"Global Administrator\", \"Privileged Role Administrator\", \"User Administrator\", \"SharePoint Administrator\", \"Exchange Administrator\", \"Hybrid Identity Administrator\", \"Application Administrator\", \"Cloud Application Administrator\"),\n            true, false\n        ),\n        // Check for privileged group memberships\n        IsInPrivilegedGroup = iff(\n            GroupMembership has_any(\"AdminAgents\", \"Azure AD Joined Device Local Administrators\", \"Directory Synchronization Accounts\", \"Domain Admins\", \"Enterprise Admins\", \"Schema Admins\", \"Key Admins\"),\n            true, false\n        ),\n        EmployeeId = JobTitle,\n        Department = Department,\n        Manager = Manager\n    | summarize arg_max(TimeGenerated, *) by AccountObjectId; // Take only the most recent record per account\n// Find Graph API calls accessing role management or generic groups\nMicrosoftGraphActivityLogs\n| where UserAgent contains \"PowerShell\"\n| where RequestUri == \"https://graph.microsoft.com/beta/roleManagement/directory/estimateAccess\" or RequestUri == \"https://graph.microsoft.com/v1.0/groups\"\n| join kind = leftouter AADNonInteractiveUserSignInLogs\n    on $left.SignInActivityId == $right.UniqueTokenIdentifier\n| join kind = leftouter RecentIdentityInfo\n    on $left.UserId == $right.AccountObjectId\n| where isnotempty(UserId) // Only include records where we have a valid UserId\n| extend \n    UserDisplayName = iff(isnotempty(AccountDisplayName), AccountDisplayName, UserDisplayName),\n    RoleCount = iff(isnotempty(ParsedRoles), array_length(ParsedRoles), 0),\n    GroupCount = iff(isnotempty(ParsedGroups), array_length(ParsedGroups), 0),\n    KeyAdminGroups = iff(isnotempty(ParsedGroups), \n        set_intersect(ParsedGroups, dynamic([\"AdminAgents\", \"Azure AD Joined Device Local Administrators\", \"Directory Synchronization Accounts\", \"Domain Admins\", \"Enterprise Admins\", \"Schema Admins\", \"Key Admins\", \"Azure DevOps Administrators\", \"Security Administrators\", \"Global Readers\"])),\n        dynamic([])),\n    AccessType = case(\n        RequestUri == \"https://graph.microsoft.com/beta/roleManagement/directory/estimateAccess\", \"Role Management Access Estimation\",\n        RequestUri == \"https://graph.microsoft.com/v1.0/groups\", \"All Groups Enumeration\",\n        \"Other Access\"\n    )\n// Add filters to reduce the number of results\n| where ResultType == 0 or isnull(ResultType) // Only successful sign-ins or when ResultType isn't available\n| summarize \n    RequestCount = count(),\n    FirstActivity = min(TimeGenerated),\n    LastActivity = max(TimeGenerated),\n    RequestURIs = make_set(RequestUri, 10),\n    UserAgents = make_set(UserAgent, 5),\n    AccessTypes = make_set(AccessType)\n    by \n    UserId, \n    UserDisplayName,\n    AccountUPN, \n    UserPrincipalName, \n    IPAddress,\n    Department,\n    EmployeeId, \n    Manager,\n    IsAdmin,\n    IsPrivilegedRole,\n    IsInPrivilegedGroup,\n    tostring(ParsedRoles),\n    RoleCount,\n    tostring(KeyAdminGroups),\n    GroupCount\n| extend \n    BlastRadiusSeverity = case(\n        IsPrivilegedRole == true, \"Critical\",\n        IsAdmin == true or IsInPrivilegedGroup == true, \"High\",\n        RoleCount > 0, \"Medium\",\n        \"Low\"\n    ),\n    ActivityDurationMinutes = datetime_diff('minute', LastActivity, FirstActivity),\n    UniqueEndpointsAccessed = array_length(RequestURIs)\n| order by BlastRadiusSeverity asc, RequestCount desc, ActivityDurationMinutes desc",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "Reconnaissance",
                    "InitialAccess",
                    "PrivilegeEscalation",
                    "Discovery"
                ],
                "techniques": [
                    "T1591",
                    "T0866",
                    "T1078",
                    "T1087"
                ],
                "subTechniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "Name",
                                "columnName": "UserPrincipalName"
                            },
                            {
                                "identifier": "DisplayName",
                                "columnName": "UserDisplayName"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPAddress"
                            }
                        ]
                    },
                    {
                        "entityType": "URL",
                        "fieldMappings": [
                            {
                                "identifier": "Url",
                                "columnName": "RequestURIs"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        }
    ]
}