{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9f2cccdc-a410-4c86-a551-84dd85d40b78')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9f2cccdc-a410-4c86-a551-84dd85d40b78')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "M356CommunityConf - Invoke-DumpApps PowerShell Module Usage Detection",
                "description": "This detection identifies the use of the Invoke-DumpApps PowerShell module, which is designed to enumerate Azure application registrations across a tenant. The module systematically queries Microsoft Graph API endpoints to collect comprehensive information about app registrations, including permission scopes, consent grants, and third-party applications.\n\nThe detection specifically monitors the characteristic pattern of Graph API calls made by this module, which generates a high volume of requests to user directories, organization information, application registrations, and service principal endpoints. This activity may indicate reconnaissance efforts to identify third-party external applications that users have consented to, which could represent potential security risks or attack vectors.\n\nThe rule incorporates user context and blast radius assessment to prioritize alerts based on the privileges of the account performing the enumeration. This helps security teams quickly identify whether the activity represents legitimate administrative work or potentially malicious reconnaissance. Each alert provides detailed information about the specific endpoints accessed, the timing and pattern of requests, and the user's position within the organization to facilitate rapid investigation and response.",
                "severity": "Medium",
                "enabled": true,
                "query": "let InvokeDumpAppsCalls = dynamic([\n    \"https://graph.microsoft.com/v1.0/users/\",\n    \"https://graph.microsoft.com/v1.0/organization\",\n    \"https://graph.microsoft.com/v1.0/applications\",\n    \"https://graph.microsoft.com/v1.0/servicePrincipals/\",\n    'https://graph.microsoft.com/v1.0/servicePrincipals?$skiptoken=\"'\n]);\n// Get most recent identity info to join later, including blast radius indicators\nlet RecentIdentityInfo = IdentityInfo\n    | where TimeGenerated > ago(10d)\n    | extend \n        // Parse assigned roles from JSON format\n        ParsedRoles = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", parse_json(AssignedRoles), dynamic([])),\n        // Parse group memberships from JSON format\n        ParsedGroups = iff(isnotempty(GroupMembership) and GroupMembership != \"[]\", parse_json(GroupMembership), dynamic([])),\n        // Check for privileged roles\n        IsAdmin = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", true, false),\n        IsPrivilegedRole = iff(\n            AssignedRoles has_any(\"Global Administrator\", \"Privileged Role Administrator\", \"User Administrator\", \"SharePoint Administrator\", \"Exchange Administrator\", \"Hybrid Identity Administrator\", \"Application Administrator\", \"Cloud Application Administrator\"),\n            true, false\n        ),\n        // Check for privileged group memberships\n        IsInPrivilegedGroup = iff(\n            GroupMembership has_any(\"AdminAgents\", \"Azure AD Joined Device Local Administrators\", \"Directory Synchronization Accounts\", \"Domain Admins\", \"Enterprise Admins\", \"Schema Admins\", \"Key Admins\"),\n            true, false\n        ),\n        EmployeeId = JobTitle,\n        Department = Department,\n        Manager = Manager\n    | summarize arg_max(TimeGenerated, *) by AccountObjectId; // Take only the most recent record per account\n// Find Graph API calls that could be suspicious reconnaissance\nMicrosoftGraphActivityLogs\n| where UserAgent contains \"PowerShell\"\n| where RequestUri in~ (InvokeDumpAppsCalls) \n    or RequestUri has_all(\"https://graph.microsoft.com/v1.0/servicePrincipals(appId=\", \"appRoleAssignedTo\")\n| extend \n    RequestCategory = case(\n        RequestUri has \"applications\", \"Applications\",\n        RequestUri has \"servicePrincipals\", \"Service Principals\",\n        RequestUri has \"users\", \"Users\",\n        RequestUri has \"organization\", \"Organization\",\n        \"Other\"\n    )\n| join kind=leftouter AADNonInteractiveUserSignInLogs \n    on $left.SignInActivityId == $right.UniqueTokenIdentifier\n| join kind=leftouter RecentIdentityInfo\n    on $left.UserId == $right.AccountObjectId\n| where isnotempty(UserId) // Only include records where we have a valid UserId\n| extend \n    RequestedAppId = extract(@\"appId='(.*?)'\", 1, RequestUri),\n    UserDisplayName = iff(isnotempty(AccountDisplayName), AccountDisplayName, UserDisplayName),\n    RoleCount = iff(isnotempty(ParsedRoles), array_length(ParsedRoles), 0),\n    GroupCount = iff(isnotempty(ParsedGroups), array_length(ParsedGroups), 0),\n    KeyAdminGroups = iff(isnotempty(ParsedGroups), \n        set_intersect(ParsedGroups, dynamic([\"AdminAgents\", \"Azure AD Joined Device Local Administrators\", \"Directory Synchronization Accounts\", \"Domain Admins\", \"Enterprise Admins\", \"Schema Admins\", \"Key Admins\", \"Azure DevOps Administrators\", \"Security Administrators\", \"Global Readers\"])),\n        dynamic([]))\n// Add filters to reduce the number of results\n| where ResultType == 0 or isnull(ResultType) // Only successful sign-ins or when ResultType isn't available\n| summarize \n    RequestCount = count(),\n    FirstActivity = min(TimeGenerated),\n    LastActivity = max(TimeGenerated),\n    RequestCategories = make_set(RequestCategory),\n    RequestURIs = make_set(RequestUri, 10),\n    RequestedAppIds = make_set(RequestedAppId, 10),\n    UserAgents = make_set(UserAgent, 5)\n    by \n    UserId, \n    UserDisplayName,\n    AccountUPN, \n    UserPrincipalName, \n    IPAddress,\n    Department,\n    EmployeeId, \n    Manager,\n    IsAdmin,\n    IsPrivilegedRole,\n    IsInPrivilegedGroup,\n    tostring(ParsedRoles),\n    RoleCount,\n    tostring(KeyAdminGroups),\n    GroupCount\n| where RequestCount > 2 // Only include users who made multiple requests\n| extend \n    BlastRadiusSeverity = case(\n        IsPrivilegedRole == true, \"Critical\",\n        IsAdmin == true or IsInPrivilegedGroup == true, \"High\",\n        RoleCount > 0, \"Medium\",\n        \"Low\"\n    ),\n    ActivityDurationMinutes = datetime_diff('minute', LastActivity, FirstActivity),\n    UniqueEndpointsAccessed = array_length(RequestURIs),\n    AppIdsAccessed = array_length(RequestedAppIds)\n| order by BlastRadiusSeverity asc, RequestCount desc, ActivityDurationMinutes desc",
                "queryFrequency": "PT5H",
                "queryPeriod": "PT5H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "Reconnaissance",
                    "InitialAccess",
                    "DefenseEvasion",
                    "CredentialAccess",
                    "LateralMovement"
                ],
                "techniques": [
                    "T1595",
                    "T0866",
                    "T1078",
                    "T1589",
                    "T1550",
                    "T1562",
                    "T1539",
                    "T1563"
                ],
                "subTechniques": [
                    "T1550.004"
                ],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "Name",
                                "columnName": "UserDisplayName"
                            },
                            {
                                "identifier": "AadUserId",
                                "columnName": "UserId"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPAddress"
                            }
                        ]
                    },
                    {
                        "entityType": "URL",
                        "fieldMappings": [
                            {
                                "identifier": "Url",
                                "columnName": "RequestURIs"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        }
    ]
}