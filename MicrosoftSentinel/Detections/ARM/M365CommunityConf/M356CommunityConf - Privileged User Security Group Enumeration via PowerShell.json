{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3644bbfe-b52c-4f46-b2bc-8bb2a7bf55e8')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3644bbfe-b52c-4f46-b2bc-8bb2a7bf55e8')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "M356CommunityConf - Privileged User Security Group Enumeration via PowerShell",
                "description": "This detection identifies users leveraging PowerShell to enumerate security groups and their memberships through Microsoft Graph API. The rule specifically targets reconnaissance activities where a user makes multiple requests to list security groups or examine their members. It incorporates blast radius assessment by prioritizing activities performed by users with privileged roles or group memberships, who pose a higher risk to the organization. The detection considers user identity context, administrative privileges, department, and management chain to help determine the potential impact of the activity. The rule focuses on patterns of multiple requests (more than 2) within a time window, which may indicate systematic information gathering rather than legitimate administrative tasks. Each alert includes details about the specific security groups accessed, allowing security teams to evaluate whether the activity is appropriate for the user's role.",
                "severity": "High",
                "enabled": true,
                "query": "// Get most recent identity info to join later, including blast radius indicators\nlet RecentIdentityInfo = IdentityInfo\n    | where TimeGenerated > ago(10d)\n    | extend \n        // Parse assigned roles from JSON format\n        ParsedRoles = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", parse_json(AssignedRoles), dynamic([])),\n        // Parse group memberships from JSON format\n        ParsedGroups = iff(isnotempty(GroupMembership) and GroupMembership != \"[]\", parse_json(GroupMembership), dynamic([])),\n        // Check for privileged roles\n        IsAdmin = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", true, false),\n        IsPrivilegedRole = iff(\n            AssignedRoles has_any(\"Global Administrator\", \"Privileged Role Administrator\", \"User Administrator\", \"SharePoint Administrator\", \"Exchange Administrator\", \"Hybrid Identity Administrator\", \"Application Administrator\", \"Cloud Application Administrator\"),\n            true, false\n        ),\n        // Check for privileged group memberships\n        IsInPrivilegedGroup = iff(\n            GroupMembership has_any(\"AdminAgents\", \"Azure AD Joined Device Local Administrators\", \"Directory Synchronization Accounts\", \"Domain Admins\", \"Enterprise Admins\", \"Schema Admins\", \"Key Admins\"),\n            true, false\n        ),\n        EmployeeId = JobTitle,\n        Department = Department,\n        Manager = Manager\n    | summarize arg_max(TimeGenerated, *) by AccountObjectId; // Take only the most recent record per account\n// Find Graph API calls accessing security groups\nMicrosoftGraphActivityLogs\n| where UserAgent contains \"PowerShell\"\n| where (RequestUri == \"https://graph.microsoft.com/v1.0/groups?=securityEnabled%20eq%20true\"\n    or RequestUri has_all(\"https://graph.microsoft.com/v1.0/groups/\",\"members\"))\n| extend GroupObjectId = tostring(extract(@\"groups/(.*?)/members\", 1, RequestUri))\n| join kind = leftouter AADNonInteractiveUserSignInLogs\n    on $left.SignInActivityId == $right.UniqueTokenIdentifier\n| join kind = leftouter RecentIdentityInfo\n    on $left.UserId == $right.AccountObjectId\n| where isnotempty(UserId) // Only include records where we have a valid UserId\n| extend \n    UserDisplayName = iff(isnotempty(AccountDisplayName), AccountDisplayName, UserDisplayName),\n    RoleCount = iff(isnotempty(ParsedRoles), array_length(ParsedRoles), 0),\n    GroupCount = iff(isnotempty(ParsedGroups), array_length(ParsedGroups), 0),\n    KeyAdminGroups = iff(isnotempty(ParsedGroups), \n        set_intersect(ParsedGroups, dynamic([\"AdminAgents\", \"Azure AD Joined Device Local Administrators\", \"Directory Synchronization Accounts\", \"Domain Admins\", \"Enterprise Admins\", \"Schema Admins\", \"Key Admins\", \"Azure DevOps Administrators\", \"Security Administrators\", \"Global Readers\"])),\n        dynamic([]))\n// Add filters to reduce the number of results\n| where ResultType == 0 or isnull(ResultType) // Only successful sign-ins or when ResultType isn't available\n| summarize \n    RequestCount = count(),\n    FirstActivity = min(TimeGenerated),\n    LastActivity = max(TimeGenerated),\n    GroupsAccessed = make_set(GroupObjectId, 15),\n    RequestURIs = make_set(RequestUri, 10),\n    UserAgents = make_set(UserAgent, 5)\n    by \n    UserId, \n    UserDisplayName,\n    AccountUPN, \n    UserPrincipalName, \n    IPAddress,\n    Department,\n    EmployeeId, \n    Manager,\n    IsAdmin,\n    IsPrivilegedRole,\n    IsInPrivilegedGroup,\n    tostring(ParsedRoles),\n    RoleCount,\n    tostring(KeyAdminGroups),\n    GroupCount\n| where RequestCount > 2 // Only include users who made multiple requests\n| extend \n    BlastRadiusSeverity = case(\n        IsPrivilegedRole == true, \"Critical\",\n        IsAdmin == true or IsInPrivilegedGroup == true, \"High\",\n        RoleCount > 0, \"Medium\",\n        \"Low\"\n    ),\n    ActivityDurationMinutes = datetime_diff('minute', LastActivity, FirstActivity),\n    UniqueEndpointsAccessed = array_length(RequestURIs),\n    SecurityGroupsAccessed = array_length(GroupsAccessed)\n| order by BlastRadiusSeverity asc, RequestCount desc, ActivityDurationMinutes desc",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "Reconnaissance",
                    "Persistence",
                    "PrivilegeEscalation",
                    "Discovery"
                ],
                "techniques": [
                    "T1589",
                    "T1595",
                    "T1078",
                    "T1007",
                    "T1087"
                ],
                "subTechniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "Name",
                                "columnName": "UserDisplayName"
                            },
                            {
                                "identifier": "FullName",
                                "columnName": "UserPrincipalName"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPAddress"
                            }
                        ]
                    },
                    {
                        "entityType": "SecurityGroup",
                        "fieldMappings": [
                            {
                                "identifier": "DistinguishedName",
                                "columnName": "GroupsAccessed"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        }
    ]
}