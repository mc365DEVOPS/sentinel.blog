{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3a97c081-5f7c-4104-a8e9-fd828e52efc8')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3a97c081-5f7c-4104-a8e9-fd828e52efc8')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "M356CommunityConf - Security Group Cloning Detection via PowerShell",
                "description": "This detection identifies potential security group cloning activities performed through PowerShell against Microsoft Graph API. The rule monitors for the characteristic sequence of operations that indicate an attacker or insider threat is enumerating security groups and their memberships, potentially to clone them for privilege escalation or persistence purposes.\n\nThe detection specifically targets the pattern where a user:\n\n1. Lists all security groups in the tenant\n2. Retrieves membership details from existing security groups\n3. Adds members to groups (potentially to a newly created group)\n\nThis activity could indicate an attacker attempting to clone a privileged security group to grant themselves additional permissions. The rule incorporates blast radius assessment by prioritizing activities performed by users based on their existing privileges, providing security teams with context about the potential impact of the activity.\n\nThe detection correlates Graph API activity with non-interactive sign-in logs and identity information to provide comprehensive context about the user performing these actions. Each alert includes details about the specific groups accessed, the timeline of operations, and the user's organizational position and existing privileges.\n\nEarly detection of security group cloning attempts is critical as this technique can be used to establish persistent privileged access within the environment, potentially bypassing traditional detection methods focused on direct privilege assignments.",
                "severity": "Medium",
                "enabled": true,
                "query": "// Get most recent identity info to join later, including blast radius indicators\nlet RecentIdentityInfo = IdentityInfo\n    | where TimeGenerated > ago(10d)\n    | extend \n        // Parse assigned roles from JSON format\n        ParsedRoles = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", parse_json(AssignedRoles), dynamic([])),\n        // Parse group memberships from JSON format\n        ParsedGroups = iff(isnotempty(GroupMembership) and GroupMembership != \"[]\", parse_json(GroupMembership), dynamic([])),\n        // Check for privileged roles\n        IsAdmin = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", true, false),\n        IsPrivilegedRole = iff(\n            AssignedRoles has_any(\"Global Administrator\", \"Privileged Role Administrator\", \"User Administrator\", \"SharePoint Administrator\", \"Exchange Administrator\", \"Hybrid Identity Administrator\", \"Application Administrator\", \"Cloud Application Administrator\"),\n            true, false\n        ),\n        // Check for privileged group memberships\n        IsInPrivilegedGroup = iff(\n            GroupMembership has_any(\"AdminAgents\", \"Azure AD Joined Device Local Administrators\", \"Directory Synchronization Accounts\", \"Domain Admins\", \"Enterprise Admins\", \"Schema Admins\", \"Key Admins\"),\n            true, false\n        ),\n        Department = Department,\n        JobTitle = JobTitle,\n        Manager = Manager\n    | summarize arg_max(TimeGenerated, *) by AccountObjectId;\n// Detect Graph Activity related to security groups cloning\nlet groupModificationEvents = MicrosoftGraphActivityLogs\n| where UserAgent contains \"PowerShell\"\n| where RequestUri has_all(\"https://graph.microsoft.com/v1.0/groups/\", \"/members/$ref\")\n    or RequestUri has_all(\"https://graph.microsoft.com/v1.0/groups\", \"/members\")\n    or RequestUri == \"https://graph.microsoft.com/v1.0/groups?=securityEnabled%20eq%20true\"\n    or RequestUri == \"https://graph.microsoft.com/v1.0/me\"\n| extend \n    GroupObjectId = tostring(extract(@\"groups/(.*?)/members\", 1, RequestUri)),\n    OperationType = case(\n        RequestUri has \"/members/$ref\", \"Add Member\",\n        RequestUri has \"/members\" and not(RequestUri has \"/members/$ref\"), \"List Members\",\n        RequestUri has \"securityEnabled%20eq%20true\", \"List Security Groups\",\n        RequestUri has \"/me\", \"Get Current User\",\n        \"Other\"\n    );\n// Join with authentication logs and identity info\nlet groupEventsWithContext = groupModificationEvents\n| join kind=leftouter AADNonInteractiveUserSignInLogs\n    on $left.SignInActivityId == $right.UniqueTokenIdentifier\n| join kind=leftouter RecentIdentityInfo\n    on $left.UserId == $right.AccountObjectId;\n// Get group creation events from audit logs to correlate with group member additions\nlet groupCreationEvents = AuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName == \"Add group\" \n| where Result == \"success\"\n| extend ActorId = tostring(InitiatedBy.user.id)\n| project \n    TimeGenerated, \n    ActorId, \n    GroupId = tostring(TargetResources[0].id), \n    GroupName = tostring(TargetResources[0].displayName);\n// Identify patterns of security group cloning\ngroupEventsWithContext\n| summarize \n    OperationCount = count(),\n    OperationTypes = make_set(OperationType),\n    SecurityGroupsAccessed = make_set(GroupObjectId, 15),\n    FirstOperation = min(TimeGenerated),\n    LastOperation = max(TimeGenerated),\n    RequestURIs = make_set(RequestUri, 10)\n    by \n    UserId, \n    UserPrincipalName,\n    IPAddress,\n    UserAgent,\n    Department,\n    JobTitle,\n    Manager,\n    IsAdmin,\n    IsPrivilegedRole,\n    IsInPrivilegedGroup\n| extend \n    OperationTimeSpan = datetime_diff('minute', LastOperation, FirstOperation),\n    HasListAndModifyOperations = array_length(set_intersect(OperationTypes, dynamic([\"List Security Groups\", \"List Members\", \"Add Member\"]))) >= 2,\n    SecurityGroupCount = array_length(SecurityGroupsAccessed),\n    BlastRadiusSeverity = case(\n        IsPrivilegedRole == true, \"Critical\",\n        IsAdmin == true or IsInPrivilegedGroup == true, \"High\",\n        \"Medium\"\n    )\n// Focus on patterns indicating security group cloning\n| where OperationCount >= 4 and HasListAndModifyOperations\n| project-reorder \n    BlastRadiusSeverity,\n    UserId,\n    UserPrincipalName,\n    IsAdmin,\n    IsPrivilegedRole,\n    Department,\n    OperationCount,\n    OperationTypes,\n    HasListAndModifyOperations,\n    SecurityGroupCount,\n    OperationTimeSpan,\n    SecurityGroupsAccessed,\n    IPAddress,\n    FirstOperation,\n    LastOperation\n| order by BlastRadiusSeverity asc, OperationCount desc",
                "queryFrequency": "PT5H",
                "queryPeriod": "PT5H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "Reconnaissance",
                    "CredentialAccess",
                    "Discovery"
                ],
                "techniques": [
                    "T1590",
                    "T1552",
                    "T1069"
                ],
                "subTechniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "AadUserId",
                                "columnName": "UserId"
                            },
                            {
                                "identifier": "Name",
                                "columnName": "UserPrincipalName"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPAddress"
                            }
                        ]
                    },
                    {
                        "entityType": "URL",
                        "fieldMappings": [
                            {
                                "identifier": "Url",
                                "columnName": "RequestURIs"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        }
    ]
}