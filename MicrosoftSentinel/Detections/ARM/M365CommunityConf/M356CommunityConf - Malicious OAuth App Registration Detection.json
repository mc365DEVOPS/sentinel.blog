{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b73e536b-a4a6-4ec9-8350-57f574255c5c')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b73e536b-a4a6-4ec9-8350-57f574255c5c')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "M356CommunityConf - Malicious OAuth App Registration Detection",
                "description": "This detection identifies potential deployment of malicious OAuth applications using the Invoke-InjectOAuthApp PowerShell module or similar techniques. The module automates the creation of app registrations with extensive permissions that don't require administrative consent, allowing attackers to establish persistent access to Mail, Files, Teams, and other sensitive resources.\nThe rule monitors Microsoft Graph API activity for the characteristic sequence of operations performed during malicious app registration: creating a new application, adding credentials (certificates or secrets), and establishing service principals. The detection specifically looks for PowerShell-initiated Graph API calls to endpoints commonly used in these attacks.\nWhen triggered, this alert provides critical information about the newly created application, including any application IDs, reply URLs that may contain malicious redirection endpoints, and details about the user account that performed the actions. This enables security teams to quickly assess the potential impact and take immediate remediation steps, such as removing the rogue application, invalidating credentials, and investigating potential account compromise.\nEarly detection of malicious OAuth app registrations is crucial as these applications can provide attackers with persistent access to tenant resources even after credentials are rotated or MFA is enforced.",
                "severity": "High",
                "enabled": true,
                "query": "// Get most recent identity info to join later, including blast radius indicators\nlet RecentIdentityInfo = IdentityInfo\n    | where TimeGenerated > ago(10d)\n    | extend \n        // Parse assigned roles from JSON format\n        ParsedRoles = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", parse_json(AssignedRoles), dynamic([])),\n        // Parse group memberships from JSON format\n        ParsedGroups = iff(isnotempty(GroupMembership) and GroupMembership != \"[]\", parse_json(GroupMembership), dynamic([])),\n        // Check for privileged roles\n        IsAdmin = iff(isnotempty(AssignedRoles) and AssignedRoles != \"[]\", true, false),\n        IsPrivilegedRole = iff(\n            AssignedRoles has_any(\"Global Administrator\", \"Privileged Role Administrator\", \"User Administrator\", \"SharePoint Administrator\", \"Exchange Administrator\", \"Hybrid Identity Administrator\", \"Application Administrator\", \"Cloud Application Administrator\"),\n            true, false\n        ),\n        // Check for privileged group memberships\n        IsInPrivilegedGroup = iff(\n            GroupMembership has_any(\"AdminAgents\", \"Azure AD Joined Device Local Administrators\", \"Directory Synchronization Accounts\", \"Domain Admins\", \"Enterprise Admins\", \"Schema Admins\", \"Key Admins\"),\n            true, false\n        ),\n        Department = Department,\n        JobTitle = JobTitle,\n        Manager = Manager\n    | summarize arg_max(TimeGenerated, *) by AccountObjectId;\n// Find specific Graph API calls related to app registration\nlet appRegistrationEvents = MicrosoftGraphActivityLogs\n| where UserAgent contains \"PowerShell\"\n| where (RequestUri has_all(\"https://graph.microsoft.com/v1.0/applications/\", \"addPassword\") or\n        RequestUri == \"https://graph.microsoft.com/v1.0/applications\" or\n        RequestUri == \"https://graph.microsoft.com/v1.0/servicePrincipals\")\n| extend \n    ApplicationId = tostring(extract(@\"applications/(.*?)/addPassword\", 1, RequestUri)),\n    OperationType = case(\n        RequestUri has \"addPassword\", \"Add Credentials\",\n        RequestUri == \"https://graph.microsoft.com/v1.0/applications\", \"Create Application\",\n        RequestUri == \"https://graph.microsoft.com/v1.0/servicePrincipals\", \"Create Service Principal\",\n        \"Other\"\n    );\n// Get AAD Audit logs for additional app registration details\nlet auditLogs = AuditLogs\n| where TimeGenerated > ago(1d)\n| where OperationName in (\"Add application\", \"Update application â€” Certificates and secrets management\", \"Update application\")\n| extend \n    AppId = tostring(TargetResources[0].id),\n    AppDisplayName = tostring(TargetResources[0].displayName),\n    ModifiedProperties = TargetResources[0].modifiedProperties;\n// Join with authentication logs\nlet appRegistrationWithAuth = appRegistrationEvents\n| join kind=leftouter AADNonInteractiveUserSignInLogs\n    on $left.SignInActivityId == $right.UniqueTokenIdentifier\n| join kind=leftouter RecentIdentityInfo\n    on $left.UserId == $right.AccountObjectId;\n// Identify users performing multiple app registration operations\nappRegistrationWithAuth\n| summarize \n    OperationCount = count(),\n    OperationTypes = make_set(OperationType),\n    FirstOperation = min(TimeGenerated),\n    LastOperation = max(TimeGenerated),\n    ApplicationIds = make_set(ApplicationId, 10),\n    RequestURIs = make_set(RequestUri, 10)\n    by \n    UserId, \n    UserPrincipalName,\n    IPAddress,\n    UserAgent,\n    Department,\n    JobTitle,\n    Manager,\n    IsAdmin,\n    IsPrivilegedRole,\n    IsInPrivilegedGroup\n| extend \n    OperationTimeSpan = datetime_diff('minute', LastOperation, FirstOperation),\n    HasAllOperationTypes = array_length(set_intersect(OperationTypes, dynamic([\"Create Application\", \"Add Credentials\", \"Create Service Principal\"]))) == 3,\n    BlastRadiusSeverity = case(\n        IsPrivilegedRole == true, \"Critical\",\n        IsAdmin == true or IsInPrivilegedGroup == true, \"High\",\n        \"Medium\"\n    )\n// Focus on patterns indicating Invoke-InjectOAuthApp usage\n| where OperationCount >= 3 or HasAllOperationTypes\n| project-reorder \n    BlastRadiusSeverity,\n    UserId,\n    UserPrincipalName,\n    IsAdmin,\n    IsPrivilegedRole,\n    Department,\n    OperationCount,\n    OperationTypes,\n    HasAllOperationTypes,\n    OperationTimeSpan,\n    ApplicationIds,\n    IPAddress,\n    FirstOperation,\n    LastOperation\n| order by HasAllOperationTypes desc, BlastRadiusSeverity asc, OperationCount desc",
                "queryFrequency": "PT5H",
                "queryPeriod": "PT5H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "InitialAccess",
                    "Persistence",
                    "PrivilegeEscalation",
                    "DefenseEvasion",
                    "CredentialAccess",
                    "Impact",
                    "LateralMovement"
                ],
                "techniques": [
                    "T0819",
                    "T1546",
                    "T1550",
                    "T1528",
                    "T1499"
                ],
                "subTechniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "AadUserId",
                                "columnName": "UserId"
                            },
                            {
                                "identifier": "Name",
                                "columnName": "UserPrincipalName"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPAddress"
                            }
                        ]
                    },
                    {
                        "entityType": "AzureResource",
                        "fieldMappings": [
                            {
                                "identifier": "ResourceId",
                                "columnName": "ApplicationIds"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        }
    ]
}